apiVersion: ray.io/v1
kind: RayService
metadata:
  name: gemma-ft-local
spec:
  serveConfigV2: |
    applications:
    - name: llm
      route_prefix: /
      import_path: serve-chat-completion:model
      deployments:
      - name: VLLMDeployment
        max_ongoing_requests: 5
        autoscaling_config:
          target_ongoing_requests: 3
          min_replicas: 1
          max_replicas: 4
        ray_actor_options:
          num_cpus: 8
          # NOTE: num_gpus is set automatically based on TENSOR_PARALLELISM
      runtime_env:
        pip: ["vllm==0.5.0.post1", "jinja2==3.1.4"]
        env_vars:
          MODEL_ID: "/model-data/hyperparam/model-job-1"
          TENSOR_PARALLELISM: "2"
          PYTHONPATH: "${HOME}/examples"
  rayClusterConfig:
    enableInTreeAutoscaling: true
    autoscalerOptions:
      upscalingMode: Aggressive
      resources:
        limits:
          cpu: "1"
          memory: "1000Mi"
        requests:
          cpu: "1"
          memory: "1000Mi"  
    headGroupSpec:
      rayStartParams:
        dashboard-host: '0.0.0.0'
      template:
        metadata:
          labels:
            llm: rayserve
        spec:
          serviceAccountName: ray-worker
          containers:
          - name: ray-head
            image: rayproject/ray-ml:2.9.0
            resources:
              limits:
                cpu: "2"
                memory: "8Gi"
              requests:
                cpu: "2"
                memory: "8Gi"
            ports:
            - containerPort: 6379
              name: gcs-server
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            volumeMounts:
            - mountPath: /home/ray/examples
              name: serve                  
          volumes:
          # You set volumes at the Pod level, then mount them into containers inside that Pod
          - name: serve
            configMap:
              # Provide the name of the ConfigMap you want to mount.
              name: serve-chat-completion
              # An array of keys from the ConfigMap to create as files
              items:
              - key: serve-chat-completion.py
                path: serve-chat-completion.py
    workerGroupSpecs:
    - replicas: 1
      minReplicas: 1
      maxReplicas: 4
      groupName: gpu-group
      rayStartParams: {}
      template:
        metadata:
          labels:
            llm: rayserve
          annotations:
            gke-gcsfuse/volumes: "true"
        spec:
          serviceAccountName: ray-worker
          containers:
          - name: llm
            image: rayproject/ray-ml:2.9.0
            resources:
              limits:
                cpu: "8"
                memory: "25Gi"
                nvidia.com/gpu: "2"
              requests:
                cpu: "8"
                memory: "25Gi"
                nvidia.com/gpu: "2"
            volumeMounts:
            - mountPath: /dev/shm
              name: dshm
            - name: gcs-fuse-csi-ephemeral
              mountPath: /model-data
              readOnly: true          
          volumes:
          - name: dshm
            emptyDir:
                medium: Memory
          - name: gcs-fuse-csi-ephemeral
            csi:
              driver: gcsfuse.csi.storage.gke.io
              volumeAttributes:
                bucketName: kh-test-data
                mountOptions: "implicit-dirs"
                fileCacheCapacity: "20Gi"
          nodeSelector:
            cloud.google.com/gke-accelerator: nvidia-l4
          tolerations:
          - key: "on-demand"
            value: "true"
            operator: "Equal"
            effect: "NoSchedule"
          - key: "nvidia.com/gpu"
            operator: "Exists"
            effect: "NoSchedule"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: serve-chat-completion
data:
  serve-chat-completion.py: |
    import os

    from typing import Dict, Optional, List
    import logging

    from fastapi import FastAPI
    from starlette.requests import Request
    from starlette.responses import StreamingResponse, JSONResponse

    from ray import serve

    from vllm.engine.arg_utils import AsyncEngineArgs
    from vllm.engine.async_llm_engine import AsyncLLMEngine
    from vllm.entrypoints.openai.cli_args import make_arg_parser
    from vllm.entrypoints.openai.protocol import (
        ChatCompletionRequest,
        ChatCompletionResponse,
        ErrorResponse,
    )
    from vllm.entrypoints.openai.serving_chat import OpenAIServingChat
    from vllm.entrypoints.openai.serving_engine import LoRAModulePath

    logger = logging.getLogger("ray.serve")

    app = FastAPI()


    @serve.deployment(name="VLLMDeployment")
    @serve.ingress(app)
    class VLLMDeployment:
        def __init__(
            self,
            engine_args: AsyncEngineArgs,
            response_role: str,
            lora_modules: Optional[List[LoRAModulePath]] = None,
            chat_template: Optional[str] = None,
        ):
            logger.info(f"Starting with engine args: {engine_args}")
            self.openai_serving_chat = None
            self.engine_args = engine_args
            self.response_role = response_role
            self.lora_modules = lora_modules
            self.chat_template = chat_template
            self.engine = AsyncLLMEngine.from_engine_args(engine_args)

        @app.post("/v1/chat/completions")
        async def create_chat_completion(
            self, request: ChatCompletionRequest, raw_request: Request
        ):
            """OpenAI-compatible HTTP endpoint.

            API reference:
                - https://docs.vllm.ai/en/latest/serving/openai_compatible_server.html
            """
            if not self.openai_serving_chat:
                model_config = await self.engine.get_model_config()
                # Determine the name of the served model for the OpenAI client.
                if self.engine_args.served_model_name is not None:
                    served_model_names = self.engine_args.served_model_name
                else:
                    served_model_names = [self.engine_args.model]
                self.openai_serving_chat = OpenAIServingChat(
                    self.engine,
                    model_config,
                    served_model_names,
                    self.response_role,
                    self.lora_modules,
                    self.chat_template,
                )
            logger.info(f"Request: {request}")
            generator = await self.openai_serving_chat.create_chat_completion(
                request, raw_request
            )
            if isinstance(generator, ErrorResponse):
                return JSONResponse(
                    content=generator.model_dump(), status_code=generator.code
                )
            if request.stream:
                return StreamingResponse(content=generator, media_type="text/event-stream")
            else:
                assert isinstance(generator, ChatCompletionResponse)
                return JSONResponse(content=generator.model_dump())


    def parse_vllm_args(cli_args: Dict[str, str]):
        """Parses vLLM args based on CLI inputs.

        Currently uses argparse because vLLM doesn't expose Python models for all of the
        config options we want to support.
        """
        parser = make_arg_parser()
        arg_strings = []
        for key, value in cli_args.items():
            arg_strings.extend([f"--{key}", str(value)])
        logger.info(arg_strings)
        parsed_args = parser.parse_args(args=arg_strings)
        return parsed_args


    def build_app(cli_args: Dict[str, str]) -> serve.Application:
        """Builds the Serve app based on CLI arguments.

        See https://docs.vllm.ai/en/latest/serving/openai_compatible_server.html#command-line-arguments-for-the-server
        for the complete set of arguments.

        Supported engine arguments: https://docs.vllm.ai/en/latest/models/engine_args.html.
        """  # noqa: E501
        parsed_args = parse_vllm_args(cli_args)
        engine_args = AsyncEngineArgs.from_cli_args(parsed_args)
        engine_args.worker_use_ray = True

        return VLLMDeployment.bind(
            engine_args,
            parsed_args.response_role,
            parsed_args.lora_modules,
            parsed_args.chat_template,
        )


    model = build_app(
        {"model": os.environ['MODEL_ID'], "tensor-parallel-size": os.environ['TENSOR_PARALLELISM']})
